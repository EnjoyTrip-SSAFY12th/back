<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.trip.enjoy_trip.repository.ReviewRepository">

    <!-- 리뷰 추가 -->
    <insert id="insertReview" useGeneratedKeys="true" keyProperty="reviewId">
        INSERT INTO review (content, point, visibility, user_id, attraction_id, gugun_id, gugun_sido_id, title)
        VALUES (#{content}, #{point}, #{visibility}, #{userId}, #{attractionId}, #{gugunId}, #{gugunSidoId}, #{title})
    </insert>


    <!-- 리뷰 이미지 추가 -->
    <insert id="insertReviewImages">
        INSERT INTO review_image (review_id, image_url, order_index)
        VALUES
        <foreach collection="imageUrls" item="imageUrl" index="index" separator=",">
            (#{reviewId}, #{imageUrl}, #{index})
        </foreach>
    </insert>

    <!-- 리뷰 수정 -->
    <update id="updateReview">
        UPDATE review
        SET
        content = #{content},
        point = #{point},
        visibility = #{visibility}
        WHERE review_id = #{reviewId}
    </update>

    <!-- 리뷰 이미지 삭제 -->
    <delete id="deleteReviewImages">
        DELETE FROM review_image
        WHERE review_id = #{reviewId}
    </delete>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview">
        DELETE FROM review
        WHERE review_id = #{reviewId}
    </delete>

    <!-- ResultMap 설정 -->
    <resultMap id="ReviewWithImagesResultMap" type="com.trip.enjoy_trip.dto.ReviewDto">
        <id column="review_id" property="reviewId"/>
        <result column="content" property="content"/>
        <result column="point" property="point"/>
        <result column="visibility" property="visibility"/>
        <result column="user_id" property="userId"/>
        <result column="attraction_id" property="attractionId"/>
        <result column="gugun_id" property="gugunId"/>
        <result column="gugun_sido_id" property="gugunSidoId"/>
        <result column="title" property="title"/>
        <result column="created_at" property="createdAt"/>
        <!-- 이미지 URL 리스트 설정 -->
        <collection property="imageUrls" ofType="string">
            <result column="image_url"/>
        </collection>
    </resultMap>

    <!-- 전체 리뷰 조회 -->
    <select id="findAll" resultMap="ReviewWithImagesResultMap">
        SELECT DISTINCT
        r.review_id AS review_id,
        r.content,
        r.point,
        r.visibility,
        r.user_id AS user_id,
        r.attraction_id AS attraction_id,
        r.gugun_id AS gugun_id,
        r.gugun_sido_id AS gugun_sido_id,
        r.title AS title,
        r.created_at AS created_at,
        ri.image_url AS image_url  <!-- image_url 별칭 추가 -->
        FROM review r
        LEFT JOIN review_image ri ON r.review_id = ri.review_id
        ORDER BY r.review_id DESC
    </select>

    <!-- 리뷰 상세 조회 -->
    <select id="findById" parameterType="int" resultMap="ReviewWithImagesResultMap">
        SELECT DISTINCT
        r.review_id AS review_id,
        r.content,
        r.point,
        r.visibility,
        r.user_id AS user_id,
        r.attraction_id AS attraction_id,
        r.gugun_id AS gugun_id,
        r.gugun_sido_id AS gugun_sido_id,
        r.title AS title,
        r.created_at AS created_at,
        ri.image_url AS image_url  <!-- image_url 별칭 추가 -->
        FROM review r
        LEFT JOIN review_image ri ON r.review_id = ri.review_id
        WHERE r.review_id = #{reviewId}
    </select>

    <!-- 좋아요 기능-->
    <!-- 좋아요 삽입 -->
    <insert id="insertLike">
        INSERT INTO `like` (review_id, user_id)
        VALUES (#{reviewId}, #{userId})
    </insert>

    <!-- 좋아요 개수 조회 -->
    <select id="selectLikeCount" resultType="int">
        SELECT COUNT(*) FROM `like` WHERE review_id = #{reviewId}
    </select>

    <!-- 좋아요 삭제 -->
    <delete id="deleteLike">
        DELETE FROM `like`
        WHERE review_id = #{reviewId} AND user_id = #{userId}
    </delete>

    <!-- 특정 사용자가 특정 리뷰에 좋아요를 눌렀는지 확인 -->
    <select id="isUserLikedReview" resultType="int">
        SELECT COUNT(*) FROM `like` WHERE review_id = #{reviewId} AND user_id = #{userId}
    </select>

    <!-- 북마크 기능-->
    <!-- 북마크 추가 -->
    <insert id="insertBookmark">
        INSERT INTO bookmark (bookmark_date, user_id, review_id)
        VALUES (NOW(), #{userId}, #{reviewId})
    </insert>

    <!-- 북마크 여부 확인 -->
    <select id="checkBookmark" resultType="int">
        SELECT COUNT(*)
        FROM bookmark
        WHERE review_id = #{reviewId} AND user_id = #{userId}
    </select>

    <!-- 북마크 삭제 -->
    <delete id="deleteBookmark">
        DELETE FROM bookmark
        WHERE review_id = #{reviewId} AND user_id = #{userId}
    </delete>

    <!-- 해시태그 기능-->
    <!-- 해시태그 ID 조회 쿼리 -->
    <select id="findHashtagId" resultType="int" parameterType="String">
        SELECT hashtag_id
        FROM hashtag
        WHERE name = #{hashtag}
    </select>

    <!-- 해시태그 새로 생성 쿼리 -->
    <insert id="createHashtag" parameterType="String">
        INSERT INTO hashtag (name)
        VALUES (#{hashtag})
    </insert>
    <insert id="addHashtagToReview" parameterType="map">
        INSERT INTO review_hashtag (review_id, hashtag_id)
        VALUES (#{reviewId}, #{hashtagId})
    </insert>

    <!-- 특정 리뷰에 등록된 해시태그 조회 -->
    <select id="findHashtagsByReviewId" parameterType="integer" resultType="string">
        SELECT h.name
        FROM review_hashtag rh JOIN hashtag h
        ON rh.hashtag_id = h.hashtag_id
        WHERE rh.review_id = #{reviewId}
    </select>

    <!-- 해시태그 이름으로 ID 찾기 -->
    <select id="findHashtagIdByName" parameterType="string" resultType="int">
        SELECT hashtag_id FROM hashtag WHERE name = #{hashtag}
    </select>

    <!-- 리뷰에 연결된 기존 해시태그 삭제 -->
    <delete id="deleteHashtagsByReviewId">
        DELETE FROM review_hashtag WHERE review_id = #{reviewId}
    </delete>

    <!-- 댓글 작성 -->
    <insert id="insertComment">
        INSERT INTO comment (content, created_at, review_id, user_id)
        VALUES (#{content}, NOW(), #{reviewId}, #{userId})
    </insert>

    <!-- 리뷰에 달린 댓글 조회 -->
    <select id="findCommentsByReviewId" parameterType="int" resultType="com.trip.enjoy_trip.dto.CommentDto">
        SELECT c.comment_id AS commentId, c.content, c.created_at AS createdAt,
        c.review_id AS reviewId, c.user_id AS userId, u.name AS userName
        FROM comment c
        JOIN user u ON c.user_id = u.user_id
        WHERE c.review_id = #{reviewId}
        ORDER BY c.created_at ASC
    </select>

    <!-- 댓글 수정 -->
    <update id="updateComment">
        UPDATE comment
        SET content = #{content}
        WHERE comment_id = #{commentId} AND user_id = #{userId}
    </update>

    <!-- 댓글 작성자 확인 -->
    <select id="findCommentOwner" resultType="int">
        SELECT user_id
        FROM comment
        WHERE comment_id = #{commentId}
    </select>

    <!-- 댓글 삭제 -->
    <delete id="deleteComment">
        DELETE FROM comment
        WHERE comment_id = #{commentId}
    </delete>

    <!-- 특정 리뷰에 달린 댓글 수 조회 -->
    <select id="findCommentCountByReviewId" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM comment
        WHERE review_id = #{reviewId}
    </select>

<!--    마이페이지 작성한 리뷰 조회 & 북마크한 리뷰 조회-->
    <!-- 사용자가 작성한 리뷰 조회 -->
    <select id="findReviewsByUserId" resultType="com.trip.enjoy_trip.dto.ReviewDto">
        SELECT
            r.review_id AS reviewId,
            r.content AS content,
            r.point AS point,
            r.visibility AS visibility,
            r.user_id AS userId,
            r.attraction_id AS attractionId,
            r.title AS title,
            r.created_at AS createdAt,
            (SELECT GROUP_CONCAT(h.name)
             FROM review_hashtag rh
                      JOIN hashtag h ON rh.hashtag_id = h.hashtag_id
             WHERE rh.review_id = r.review_id) AS hashtags
        FROM review r
        WHERE r.user_id = #{userId}
        ORDER BY r.created_at DESC
    </select>

    <!-- 사용자가 북마크한 리뷰 조회 -->
    <select id="findBookmarkedReviewsByUserId" resultType="com.trip.enjoy_trip.dto.ReviewDto">
        SELECT
            r.review_id AS reviewId,
            r.content AS content,
            r.point AS point,
            r.visibility AS visibility,
            r.user_id AS userId,
            r.attraction_id AS attractionId,
            r.title AS title,
            r.created_at AS createdAt,
            (SELECT GROUP_CONCAT(h.name)
             FROM review_hashtag rh
                      JOIN hashtag h ON rh.hashtag_id = h.hashtag_id
             WHERE rh.review_id = r.review_id) AS hashtags
        FROM review r
                 INNER JOIN bookmark b ON r.review_id = b.review_id
        WHERE b.user_id = #{userId}
        ORDER BY b.bookmark_date DESC
    </select>
    <!-- 해당 크루 리뷰 조회 -->
     <select id="findReviewsByCrewId" parameterType="int" resultType="com.trip.enjoy_trip.dto.ReviewDto">
     SELECT *
     FROM review
     WHERE visibility = #{crewId}
     </select>


</mapper>
